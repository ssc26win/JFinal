package com.shangsc.platform.model;

import com.jfinal.plugin.activerecord.Page;
import com.shangsc.platform.core.model.Condition;
import com.shangsc.platform.core.model.Operators;
import com.shangsc.platform.core.util.CommonUtils;
import com.shangsc.platform.core.view.InvokeResult;
import com.shangsc.platform.model.base.BaseWaterIndex;
import org.apache.commons.lang3.StringUtils;

import java.math.BigDecimal;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class WaterIndex extends BaseWaterIndex<WaterIndex> {
	public static final WaterIndex me = new WaterIndex();

	/**
	 * 水表编号是否已存在
	 * @param innerCode
	 * @return
	 */
	public boolean hasExist(String innerCode){
		Set<Condition> conditions = new HashSet<Condition>();
		conditions.add(new Condition("inner_code", Operators.EQ, innerCode));
		long num = this.getCount(conditions);
		return num>0?true:false;
	}

	public InvokeResult save(Long id, Long companyId, String innerCode, String waterUseType, BigDecimal waterIndex, BigDecimal january,
							 BigDecimal february, BigDecimal march, BigDecimal april, BigDecimal may, BigDecimal june, BigDecimal july,
							 BigDecimal august, BigDecimal september, BigDecimal october, BigDecimal november, BigDecimal december) {
		if (!Company.me.hasExistCompany(innerCode)) {
			return InvokeResult.failure("公司编号不存在");
		}
		if (null != id && id > 0l) {
			WaterIndex index = this.findById(id);
			if (index == null) {
				return InvokeResult.failure("更新失败, 该单位用水指标不存在");
			}
			index = setProp(index, companyId, innerCode, waterUseType, waterIndex, january, february, march, april,
					may, june, july, august, september, october, november, december);
			index.update();
		} else {
			if (this.hasExist(innerCode)) {
				return InvokeResult.failure("单位名称或编号已存在");
			} else {
				WaterIndex index = new WaterIndex();
				index = setProp(index, companyId, innerCode, waterUseType, waterIndex, january, february, march, april,
						may, june, july, august, september, october, november, december);
				index.save();
			}
		}
		return InvokeResult.success();
	}

	private WaterIndex setProp(WaterIndex index, Long companyId, String innerCode, String waterUseType, BigDecimal waterIndex,
							   BigDecimal january, BigDecimal february, BigDecimal march, BigDecimal april, BigDecimal may, BigDecimal june,
							   BigDecimal july, BigDecimal august, BigDecimal september, BigDecimal october, BigDecimal november, BigDecimal december) {
		index.setCompanyId(companyId);
		index.setInnerCode(innerCode);
		index.setWaterIndex(waterIndex);
		index.setWaterUseType(waterUseType);
		index.setJanuary(january);
		index.setFebruary(february);
		index.setMarch(march);
		index.setApril(april);
		index.setMay(may);
		index.setJune(june);
		index.setJuly(july);
		index.setAugust(august);
		index.setSeptember(september);
		index.setOctober(october);
		index.setNovember(november);
		index.setDecember(december);
		return index;
	}

	public InvokeResult deleteData(String idStrs) {
		List<Long> ids = CommonUtils.getLongListByStrs(idStrs);
		for (int i = 0; i < ids.size(); i++) {
			this.deleteById(ids.get(i));
		}
		return InvokeResult.success();
	}

	public Page<WaterIndex> getWaterIndexPage(int page, int rows, String keyword, String orderbyStr) {
		String select = "select twi.*,tc.name as companyName";
		StringBuffer sqlExceptSelect = new StringBuffer(" from t_water_index twi, t_company tc");
		sqlExceptSelect.append(" where 1=1 and twi.inner_code=tc.inner_code ");
		if (StringUtils.isNotEmpty(keyword)) {
			keyword = StringUtils.trim(keyword);
			if (StringUtils.isNotEmpty(keyword)) {
				sqlExceptSelect.append(" and (twi.inner_code='" + keyword + "' or tc.name like '%" + keyword + "%') ");
			}
		}
		if (StringUtils.isNotEmpty(orderbyStr)) {
		    sqlExceptSelect.append(orderbyStr);
		}
		this.paginate(page, rows, select, sqlExceptSelect.toString());
		return this.paginate(page, rows, select, sqlExceptSelect.toString());
	}
}
