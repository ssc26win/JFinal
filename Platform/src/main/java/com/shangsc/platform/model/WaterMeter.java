package com.shangsc.platform.model;

import com.jfinal.plugin.activerecord.Page;
import com.shangsc.platform.core.model.Condition;
import com.shangsc.platform.core.model.Operators;
import com.shangsc.platform.core.util.CommonUtils;
import com.shangsc.platform.core.view.InvokeResult;
import com.shangsc.platform.model.base.BaseWaterMeter;
import org.apache.commons.lang3.StringUtils;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class WaterMeter extends BaseWaterMeter<WaterMeter> {

	public static final WaterMeter me = new WaterMeter();

    public Page<WaterMeter> getWaterMeterPage(int page, int rows, String keyword, String orderbyStr) {
        String select = "select twm.*,(select tc.name from t_company tc where tc.inner_code=twm.inner_code) as companyName ";
        StringBuffer sqlExceptSelect = new StringBuffer(" from t_water_meter twm ");
        sqlExceptSelect.append(" where 1=1 ");
        if (StringUtils.isNotEmpty(keyword)) {
            sqlExceptSelect.append(" and (name like %"+ keyword +" or inner_code=" + keyword + " or meter_num=" + keyword + ") ");
        }
        if (StringUtils.isNotEmpty(orderbyStr)) {
            sqlExceptSelect.append(orderbyStr);
        }
        this.paginate(page, rows, select, sqlExceptSelect.toString());
        return this.paginate(page, rows, select, sqlExceptSelect.toString());
    }

    /**
     * 水表编号是否已存在
     * @param meterNum
     * @return
     */
    public boolean hasExist(String meterNum){
        Set<Condition> conditions = new HashSet<Condition>();
        conditions.add(new Condition("meter_num", Operators.EQ, meterNum));
        long num = this.getCount(conditions);
        return num>0?true:false;
    }

    public InvokeResult save(Long id, Long companyId, String innerCode, String lineNum, String meterNum,
                            Integer watersType, Integer waterUseType, String meterAttr, Integer chargeType, String billingCycle) {
        if (null != id && id > 0l) {
            WaterMeter meter = this.findById(id);
            if (meter == null) {
                return InvokeResult.failure("更新失败, 该水表不存在");
            }
            meter = setProp(meter, companyId, innerCode, lineNum, meterNum, watersType, waterUseType, meterAttr, chargeType, billingCycle);
            meter.update();
        } else {
            if (this.hasExist(meterNum)) {
                return InvokeResult.failure("水表编号已存在");
            } else {
                WaterMeter meter = new WaterMeter();
                meter = setProp(meter, companyId, innerCode, lineNum, meterNum, watersType, waterUseType, meterAttr, chargeType, billingCycle);
                meter.setRegistDate(new Date());
                meter.save();
            }
        }
        return InvokeResult.success();
    }

    private WaterMeter setProp(WaterMeter meter, Long companyId, String innerCode, String lineNum, String meterNum,
                            Integer watersType, Integer waterUseType, String meterAttr, Integer chargeType, String billingCycle) {
        meter.setCompanyId(companyId);
        meter.setInnerCode(innerCode);
        meter.setLineNum(lineNum);
        meter.setMeterNum(meterNum);
        meter.setWatersType(watersType);
        meter.setWaterUseType(waterUseType);
        meter.setMeterAttr(meterAttr);
        meter.setChargeType(chargeType);
        meter.setBillingCycle(billingCycle);
        return meter;
    }

    public InvokeResult deleteData(String idStrs) {
        List<Long> ids = CommonUtils.getLongListByStrs(idStrs);
        for (int i = 0; i < ids.size(); i++) {
            this.deleteById(ids.get(i));
        }
        return InvokeResult.success();
    }


    public  WaterMeter findByInnerCode(String innerCode){
        String sql = "SELECT * FROM t_Water_Meter WHERE inner_code= ?";
        return this.findFirst(sql,innerCode);
    }

    public Page<WaterMeter> getExceptionWaterMeterPage(int page, int rows, String keyword, String orderbyStr) {
        String select = "select twm.* ,(select tc.name from t_company tc where tc.inner_code=twm.inner_code) as companyName ";
        StringBuffer sqlExceptSelect = new StringBuffer("from (SELECT t.* FROM t_Water_Meter t WHERE t.meter_num NOT in  (select t.meter_num from t_actual_data t where to_days(t.write_time) = to_days(now()) GROUP BY t.meter_num)) twm ");
        sqlExceptSelect.append("where 1= 1");
        if (StringUtils.isNotEmpty(keyword)) {
            sqlExceptSelect.append(" and (name like %"+ keyword +" or inner_code=" + keyword + " or meter_num=" + keyword + ") ");
        }
        if (StringUtils.isNotEmpty(orderbyStr)) {
            sqlExceptSelect.append(orderbyStr);
        }
        this.paginate(page, rows, select, sqlExceptSelect.toString());
        return this.paginate(page, rows, select, sqlExceptSelect.toString());
    }


    public Page<WaterMeter> getWarnWaterMeterPage(int page, int rows, String keyword, String orderbyStr) {
        String select = "select twm.*,(select tc.name from t_company tc where tc.inner_code=twm.inner_code) as companyName ";
        StringBuffer sqlExceptSelect = new StringBuffer(" from t_water_meter twm ");
        sqlExceptSelect.append(" where 1=1 ");
        if (StringUtils.isNotEmpty(keyword)) {
            sqlExceptSelect.append(" and inner_code in (" + keyword + ")  ");
        }
        if (StringUtils.isNotEmpty(orderbyStr)) {
            sqlExceptSelect.append(orderbyStr);
        }
        this.paginate(page, rows, select, sqlExceptSelect.toString());
        return this.paginate(page, rows, select, sqlExceptSelect.toString());
    }





}
