package com.shangsc.platform.model;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.shangsc.platform.core.util.CommonUtils;
import com.shangsc.platform.core.view.InvokeResult;
import com.shangsc.platform.model.base.BaseMsgReceiver;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

import java.util.*;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class MsgReceiver extends BaseMsgReceiver<MsgReceiver> {
    public static final MsgReceiver dao = new MsgReceiver();

    public Page<MsgReceiver> getPageInfo(int pageNo, int pageSize, Integer uId, String keyword, String orderBy) {
        String select = "select tmr.*,tm.title,tm.content  ";
        StringBuffer sqlExceptSelect = new StringBuffer(" from t_msg_receiver tmr ");
        sqlExceptSelect.append(" left join t_message tm on tm.id=tmr.msg_id where 1=1");
        if (uId != null && uId > 0L) {
            sqlExceptSelect.append(" and tmr.receiver_id=" + uId);
        }
        if (StringUtils.isNotEmpty(keyword)) {
            sqlExceptSelect.append(" and (title like '%" + keyword + "%' or content like '%" + keyword + "%') ");
        }
        if (StringUtils.isNotEmpty(orderBy)) {
            sqlExceptSelect.append(orderBy);
        } else {
            sqlExceptSelect.append(" order by tmr.status asc, tmr.create_time desc");
        }
        return this.paginate(pageNo, pageSize, select, sqlExceptSelect.toString());
    }

    public InvokeResult save(Long mid, Long id, List<Long> userIds) {
        if (null != id && id > 0L) {
            MsgReceiver msgReceiver = this.findById(id);
            if (msgReceiver == null) {
                return InvokeResult.failure("更新消息失败, 该消息不存在");
            }
            msgReceiver = setProp(msgReceiver, mid, userIds);
            msgReceiver.update();
        } else {
            MsgReceiver msgReceiver = new MsgReceiver();
            msgReceiver = setProp(msgReceiver, mid, userIds);
            msgReceiver.save();
        }
        return InvokeResult.success();
    }

    public InvokeResult saveList(Long mid, List<Long> userIds) {
        if (null != mid && mid > 0L) {
            Message message = Message.dao.findById(mid);
            if (message == null) {
                InvokeResult.failure("请选择一条消息");
            }
            List<MsgReceiver> msgReceivers = this.find("select * from t_msg_receiver where msg_id=" + mid);
            if (CollectionUtils.isNotEmpty(msgReceivers)) {
                Db.update("delete from t_msg_receiver where msg_id=" + mid);
            }
        }
        List<MsgReceiver> msgReceiver = setList(mid, userIds);
        saveBatch(msgReceiver, msgReceiver.size());
        return InvokeResult.success();
    }

    private List<MsgReceiver> setList(Long mid, List<Long> userIds) {
        List<MsgReceiver> list = new ArrayList<>();
        List<SysUser> users = SysUser.me.find("select * from sys_user where id in (" + StringUtils.join(userIds, ",") + ")");
        for (SysUser usr : users) {
            MsgReceiver msgReceiver = new MsgReceiver();
            msgReceiver.setStatus(0);
            msgReceiver.setMsgId(mid);
            msgReceiver.setReceiverId(Long.parseLong(usr.getId() + ""));
            msgReceiver.setReceiverName(usr.getName());
            msgReceiver.setCreateTime(new Date());
            msgReceiver.setUpdateTime(new Date());
            list.add(msgReceiver);
        }
        return list;
    }

    private MsgReceiver setProp(MsgReceiver msgReceiver, Long mid, List<Long> userIds) {
        msgReceiver.setStatus(0);
        msgReceiver.setReceiverId(0L);
        msgReceiver.setCreateTime(new Date());
        return msgReceiver;
    }

    /**
     * CREATE TABLE `t_msg_receiver` (
     * `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
     * `msg_id` bigint(20) NOT NULL COMMENT '消息id',
     * `status` tinyint(4) DEFAULT '0' COMMENT '状态: 0 未读 1 已读',
     * `memo` varchar(500) DEFAULT NULL COMMENT '备注',
     * `receiver_id` bigint(20) DEFAULT NULL COMMENT '接收人Id',
     * `receiver_name` varchar(50) DEFAULT NULL COMMENT '接收人姓名',
     * `create_time` datetime DEFAULT NULL COMMENT '创建时间',
     * `update_time` datetime DEFAULT NULL COMMENT '更新时间',
     * PRIMARY KEY (`id`)
     * ) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT COMMENT='消息接收者表';
     *
     * @param modelOrRecordList
     * @param batchSize
     * @return
     */
    public static int[] saveBatch(List<MsgReceiver> modelOrRecordList, int batchSize) {
        String sql = "insert into t_msg_receiver(msg_id,status,memo,receiver_id,receiver_name,create_time,update_time" +
                ") values (?,?,?,?,?,?,?)";
        String columns = "msg_id,status,memo,receiver_id,receiver_name,create_time,update_time";
        int[] result = Db.batch(sql, columns, modelOrRecordList, batchSize);
        return result;
    }

    public Long findUnReadCount(Integer uid) {
        List<Record> records = Db.find("select count(1) as unReadCount from t_msg_receiver tmr inner join t_message tm on tm.id=tmr.msg_id" +
                " where tm.status=1 and tmr.status=0 and tmr.receiver_id=?", uid);
        if (CollectionUtils.isNotEmpty(records)) {
            Record record = records.get(0);
            return record.getLong("unReadCount");
        }
        return 0L;
    }

    public InvokeResult deleteData(String idStrs) {
        List<Long> ids = CommonUtils.getLongListByStrs(idStrs);
        for (int i = 0; i < ids.size(); i++) {
            this.deleteById(ids.get(i));
        }
        return InvokeResult.success();
    }

    public InvokeResult setReading(String idStrs) {
        if (StringUtils.isNotEmpty(idStrs)) {
            int update = Db.update("update t_msg_receiver set status=1 where id in (?)", idStrs);
        } else {
            int update = Db.update("update t_msg_receiver set status=1 where status=0");
        }
        return InvokeResult.success();
    }

    public Map<Long, List<String>> findReceiversByMsgIds(List<Long> msgIds) {
        List<MsgReceiver> msgReceivers = this.find("select msg_id,receiver_name from t_msg_receiver " +
                "where msg_id in (" + StringUtils.join(msgIds, ",") + ") order by msg_id asc, create_time asc ");
        Map<Long, List<String>> msgReceiversMap = new LinkedHashMap<>();
        for (Long msgId : msgIds) {
            List<String> receiverNames = new ArrayList<>();
            for (MsgReceiver m : msgReceivers) {
                if (m.getMsgId() == msgId.longValue()) {
                    receiverNames.add(m.getReceiverName());
                }
            }
            if (CollectionUtils.isNotEmpty(receiverNames)) {
                msgReceiversMap.put(msgId, receiverNames);
            }
        }
        return msgReceiversMap;
    }


    /********************************* WxApp use  ***************************************/

    /**
     * @param pageNo
     * @param pageSize
     * @param uId
     * @return
     */
    public Page<Message> getWxPageList(int pageNo, int pageSize, Integer uId) {
        String select = "select tmr.id,tm.title,tm.content,tmr.status,tmr.create_time ";
        StringBuffer sqlExceptSelect = new StringBuffer(" from t_msg_receiver tmr ");
        sqlExceptSelect.append(" inner join t_message tm on tm.id=tmr.msg_id where tmr.receiver_id=" + uId);
        sqlExceptSelect.append(" order by tmr.status asc, tmr.create_time desc");
        return Message.dao.paginate(pageNo, pageSize, select, sqlExceptSelect.toString());
    }

    /**
     * @param uId
     * @return
     */
    public List<Message> getWxRollList(Integer uId, Integer limit) {
        String select = "select tmr.id,tm.title,tm.content,tmr.status,tmr.create_time ";
        StringBuffer sqlExceptSelect = new StringBuffer(" from t_msg_receiver tmr ");
        sqlExceptSelect.append(" inner join t_message tm on tm.id=tmr.msg_id where tmr.receiver_id=" + uId);
        sqlExceptSelect.append(" order by tmr.status asc, tmr.create_time desc ");
        if (limit != null && limit > 0) {
            sqlExceptSelect.append(" limit " + limit);
        } else {
            sqlExceptSelect.append(" limit 10 ");
        }
        List<Message> messages = Message.dao.find(select + sqlExceptSelect.toString());
        return messages;
    }


    public InvokeResult setReading(String idStrs, Integer uId) {
        if (StringUtils.isNotEmpty(idStrs)) {
            int update = Db.update("update t_msg_receiver set status=1 where receiver_id=" + uId + " and status=0 and id in (?)", idStrs);
        } else {
            int update = Db.update("update t_msg_receiver set status=1 where receiver_id=" + uId + " and status=0 ");
        }
        return InvokeResult.success();
    }
}
